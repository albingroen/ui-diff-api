const puppeteer = require('puppeteer')
const axios = require('axios')
const ora = require('ora')
const pages = require('./pages')
const config = require('./ui-diff-config')

// Parsed command line args
const args = require('minimist')(process.argv.slice(2))

// Find out if to launch headless or headful
const headless = !args.headless || args.headless === 'true' || args.headless === true

// Main function
async function main() {
  process.setMaxListeners(Infinity)

  // Launch headless/headful browser
  const browser = await puppeteer.launch({
    headless,
  })

  // Initate progress bar
  const spinner = ora(`Spinning up head${headless ? 'less' : 'ful'} browser`).start()

  // Keep track of amount of pages screenshotted
  let progress = 0

  // Async function for taking a screenshot
  async function run(url, name, variant) {
    const page = await browser.newPage()

    // Set browser dimensions for screenshot
    const sizes = {
      phone: {
        width: 375,
        height: 812,
      },
      tablet: {
        width: 768,
        height: 1024,
      },
      computer: {
        width: 1920,
        height: 1080,
      },
    }

    await page.setViewport(args.size ? sizes[args.size] || sizes.computer : sizes.computer)

    // Go to page and if fails close browser
    try {
      await page.goto(url, { timeout: 0, waitUntil: 'networkidle2' })
    } catch (e) {
      browser.close()
    }

    // Take screenshot and close page. On last page also close browser
    try {
      await page
        .screenshot({
          encoding: 'binary',
          fullPage: true,
        })
        .then((imageBuffer) => {
          progress = progress + 1
          page.close().then(() => {
            // Update spinner
            spinner.text = `Taking screenshots [${progress}/${pages.length * (args.env ? 1 : 2) + 1}]`

            // Upload image to ui-diff
            axios.post('http://localhost:5000/projects/images', { image: imageBuffer, env: variant, name }, { headers: { "api-token": process.env.UI_DIFF_API_TOKEN } }).then(() => {
              console.log({
                success: true
              })
            }).catch(err => {
              console.error(err)
            })

            // On last page close browser and stop spinner
            if (progress === pages.length * (!args.env ? 2 : 1)) {
              browser
                .close()
                .then(() => {
                  spinner.stop()
                  // eslint-disable-next-line no-console
                  console.log('Results available on https://ui-diff.io')
                })
                .catch(e => {
                  // eslint-disable-next-line no-console
                  console.error(e)
                })
            }
          })
        })
    } catch (e) {
      browser.close()
    }
  }

  const envs = config.envs

  if (!args.env || !envs[args.env]) {
    // Screenshot pages on localhost
    pages.forEach(p => {
      run(`${envs.local}${p.path}`, p.name, 'local')
    })

    // Screenshot pages on live
    pages.forEach(p => {
      run(`${envs.live}${p.path}`, p.name, 'live')
    })
  } else {
    pages.forEach(p => {
      run(`${envs[args.env]}${p.path}`, p.name, args.env)
    })
  }
}

main()
